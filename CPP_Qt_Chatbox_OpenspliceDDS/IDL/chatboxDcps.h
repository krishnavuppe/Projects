//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: chatboxDcps.h
//  Source: chatboxDcps.idl
//  Generated: Mon Dec 26 22:38:08 2016
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _CHATBOXDCPS_H_
#define _CHATBOXDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "chatbox.h"
#include "dds_dcps.h"


namespace chatbox
{

   class messageTypeSupportInterface;

   typedef messageTypeSupportInterface * messageTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < messageTypeSupportInterface> messageTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < messageTypeSupportInterface> messageTypeSupportInterface_out;


   class messageDataWriter;

   typedef messageDataWriter * messageDataWriter_ptr;
   typedef DDS_DCPSInterface_var < messageDataWriter> messageDataWriter_var;
   typedef DDS_DCPSInterface_out < messageDataWriter> messageDataWriter_out;


   class messageDataReader;

   typedef messageDataReader * messageDataReader_ptr;
   typedef DDS_DCPSInterface_var < messageDataReader> messageDataReader_var;
   typedef DDS_DCPSInterface_out < messageDataReader> messageDataReader_out;


   class messageDataReaderView;

   typedef messageDataReaderView * messageDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < messageDataReaderView> messageDataReaderView_var;
   typedef DDS_DCPSInterface_out < messageDataReaderView> messageDataReaderView_out;

   struct messageSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < message, struct messageSeq_uniq_> messageSeq;
   typedef DDS_DCPSSequence_var < messageSeq> messageSeq_var;
   typedef DDS_DCPSSequence_out < messageSeq> messageSeq_out;
   class messageTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef messageTypeSupportInterface_ptr _ptr_type;
      typedef messageTypeSupportInterface_var _var_type;

      static messageTypeSupportInterface_ptr _duplicate (messageTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static messageTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static messageTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static messageTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      messageTypeSupportInterface_ptr _this () { return this; }


   protected:
      messageTypeSupportInterface () {};
      ~messageTypeSupportInterface () {};
   private:
      messageTypeSupportInterface (const messageTypeSupportInterface &);
      messageTypeSupportInterface & operator = (const messageTypeSupportInterface &);
   };

   class messageDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef messageDataWriter_ptr _ptr_type;
      typedef messageDataWriter_var _var_type;

      static messageDataWriter_ptr _duplicate (messageDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static messageDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static messageDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static messageDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      messageDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const message& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const message& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const message& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const message& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const message& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const message& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const message& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const message& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const message& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const message& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (message& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const message& instance_data) = 0;

   protected:
      messageDataWriter () {};
      ~messageDataWriter () {};
   private:
      messageDataWriter (const messageDataWriter &);
      messageDataWriter & operator = (const messageDataWriter &);
   };

   class messageDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef messageDataReader_ptr _ptr_type;
      typedef messageDataReader_var _var_type;

      static messageDataReader_ptr _duplicate (messageDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static messageDataReader_ptr _narrow (DDS::Object_ptr obj);
      static messageDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static messageDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      messageDataReader_ptr _this () { return this; }

      virtual DDS::Long read (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (message& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (message& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (messageSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (message& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const message& instance) = 0;

   protected:
      messageDataReader () {};
      ~messageDataReader () {};
   private:
      messageDataReader (const messageDataReader &);
      messageDataReader & operator = (const messageDataReader &);
   };

   class messageDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef messageDataReaderView_ptr _ptr_type;
      typedef messageDataReaderView_var _var_type;

      static messageDataReaderView_ptr _duplicate (messageDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static messageDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static messageDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static messageDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      messageDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (message& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (message& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (messageSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (messageSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (message& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const message& instance) = 0;

   protected:
      messageDataReaderView () {};
      ~messageDataReaderView () {};
   private:
      messageDataReaderView (const messageDataReaderView &);
      messageDataReaderView & operator = (const messageDataReaderView &);
   };

}




#endif 
