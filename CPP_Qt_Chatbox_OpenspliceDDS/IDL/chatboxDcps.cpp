//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: chatboxDcps.cpp
//  Source: chatboxDcps.idl
//  Generated: Mon Dec 26 22:38:08 2016
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************

#include "chatboxDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < chatbox::message, struct messageSeq_uniq_>;
#endif

const char * chatbox::messageTypeSupportInterface::_local_id = "IDL:chatbox/messageTypeSupportInterface:1.0";

chatbox::messageTypeSupportInterface_ptr chatbox::messageTypeSupportInterface::_duplicate (chatbox::messageTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chatbox::messageTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, chatbox::messageTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chatbox::messageTypeSupportInterface_ptr chatbox::messageTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   chatbox::messageTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (chatbox::messageTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < chatbox::messageTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chatbox::messageTypeSupportInterface_ptr chatbox::messageTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   chatbox::messageTypeSupportInterface_ptr result;
   result = dynamic_cast < chatbox::messageTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * chatbox::messageDataWriter::_local_id = "IDL:chatbox/messageDataWriter:1.0";

chatbox::messageDataWriter_ptr chatbox::messageDataWriter::_duplicate (chatbox::messageDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chatbox::messageDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, chatbox::messageDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chatbox::messageDataWriter_ptr chatbox::messageDataWriter::_narrow (DDS::Object_ptr p)
{
   chatbox::messageDataWriter_ptr result = NULL;
   if (p && p->_is_a (chatbox::messageDataWriter::_local_id))
   {
      result = dynamic_cast < chatbox::messageDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chatbox::messageDataWriter_ptr chatbox::messageDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   chatbox::messageDataWriter_ptr result;
   result = dynamic_cast < chatbox::messageDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * chatbox::messageDataReader::_local_id = "IDL:chatbox/messageDataReader:1.0";

chatbox::messageDataReader_ptr chatbox::messageDataReader::_duplicate (chatbox::messageDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chatbox::messageDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, chatbox::messageDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chatbox::messageDataReader_ptr chatbox::messageDataReader::_narrow (DDS::Object_ptr p)
{
   chatbox::messageDataReader_ptr result = NULL;
   if (p && p->_is_a (chatbox::messageDataReader::_local_id))
   {
      result = dynamic_cast < chatbox::messageDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chatbox::messageDataReader_ptr chatbox::messageDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   chatbox::messageDataReader_ptr result;
   result = dynamic_cast < chatbox::messageDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * chatbox::messageDataReaderView::_local_id = "IDL:chatbox/messageDataReaderView:1.0";

chatbox::messageDataReaderView_ptr chatbox::messageDataReaderView::_duplicate (chatbox::messageDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chatbox::messageDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, chatbox::messageDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chatbox::messageDataReaderView_ptr chatbox::messageDataReaderView::_narrow (DDS::Object_ptr p)
{
   chatbox::messageDataReaderView_ptr result = NULL;
   if (p && p->_is_a (chatbox::messageDataReaderView::_local_id))
   {
      result = dynamic_cast < chatbox::messageDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chatbox::messageDataReaderView_ptr chatbox::messageDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   chatbox::messageDataReaderView_ptr result;
   result = dynamic_cast < chatbox::messageDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



